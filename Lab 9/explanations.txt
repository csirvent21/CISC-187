Task 1
When the value 11 is added to the heap, it is positioned at index 11 because that is the next available index. The parent of this new node will be at index i/2 or i-1/2. In this case it would be 11-1/2 which is 5. The node at index 5 is the value 5. So 11 will be the child of 5 (node). Then it has to bubble up.
11 is compared to 5. 11 > 5 so they are swapped.
11 is compared to 9. 11 > 9 so they are swapped.
11 is compared to 10. 11 > 10 so they are swapped.
This means that 11 will become the new root of the tree.

Task 2
When removing a root, the last index of the tree becomes the new root. In this case, when 10 is removed, 3 becomes the new root. Then it has to bubble down.
In this case, we compare children to look for the greater one to swap with.
3 < children so check:
9 is compared to 8. 9 > 8 so 3 is swapped with 9.
3 < children so check:
6 is compared to 5. 6 > 5 so 3 is swapped with 6.
3 > children so stop.

Task 3
In a heap the root of the tree will always be the greates value of the list of numbers. This means that every time we pop the root, we are taking the greatest value of the current heap. This means that the array will be in order of greatest to least.
array = [99, 68, 55, 34, 22, 10, 2]